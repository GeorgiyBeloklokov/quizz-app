{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { customFetchBase } from '.';\nimport { setIsAuth, setToken } from '../reducers/userSlice';\nexport const registrationApi = createApi({\n  reducerPath: 'registrationApi',\n  baseQuery: customFetchBase,\n  endpoints: builder => ({\n    registrationUser: builder.mutation({\n      query(data) {\n        return {\n          url: 'auth/registration',\n          method: 'POST',\n          body: data\n          //credentials: 'include',\n        };\n      },\n\n      async onQueryStarted(args, _ref) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          dispatch(setToken(data.token));\n          dispatch(setIsAuth(true));\n          console.log(`data =>>>>>>>>`, data.token);\n          //localStorage.setItem('token', data.token);\n        } catch (error) {\n          console.log(`error =>>>>>>>>>>`, error);\n        }\n      }\n    })\n  })\n});\nexport const {\n  useRegistrationUserMutation\n} = registrationApi;","map":{"version":3,"names":["createApi","customFetchBase","setIsAuth","setToken","registrationApi","reducerPath","baseQuery","endpoints","builder","registrationUser","mutation","query","data","url","method","body","onQueryStarted","args","dispatch","queryFulfilled","token","console","log","error","useRegistrationUserMutation"],"sources":["C:/Users/georg/Desktop/diskD/diskD/my/read-books/src/store/api/RegistrationApi.ts"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react';\r\nimport { customFetchBase } from '.';\r\nimport { LoginInput } from '../../components/utils/types';\r\nimport { setIsAuth, setToken } from '../reducers/userSlice';\r\n\r\ntype IToken = {\r\n  token: string;\r\n};\r\n\r\nexport const registrationApi = createApi({\r\n  reducerPath: 'registrationApi',\r\n  baseQuery: customFetchBase,\r\n  endpoints: (builder) => ({\r\n    registrationUser: builder.mutation<IToken, LoginInput>({\r\n      query(data) {\r\n        return {\r\n          url: 'auth/registration',\r\n          method: 'POST',\r\n          body: data,\r\n          //credentials: 'include',\r\n        };\r\n      },\r\n      async onQueryStarted(args, { dispatch, queryFulfilled }) {\r\n        try {\r\n          const { data } = await queryFulfilled;\r\n          dispatch(setToken(data.token));\r\n          dispatch(setIsAuth(true));\r\n          console.log(`data =>>>>>>>>`, data.token);\r\n          //localStorage.setItem('token', data.token);\r\n        } catch (error) {\r\n          console.log(`error =>>>>>>>>>>`, error);\r\n        }\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useRegistrationUserMutation } = registrationApi;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,8BAA8B;AACxD,SAASC,eAAe,QAAQ,GAAG;AAEnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,uBAAuB;AAM3D,OAAO,MAAMC,eAAe,GAAGJ,SAAS,CAAC;EACvCK,WAAW,EAAE,iBAAiB;EAC9BC,SAAS,EAAEL,eAAe;EAC1BM,SAAS,EAAGC,OAAO,KAAM;IACvBC,gBAAgB,EAAED,OAAO,CAACE,QAAQ,CAAqB;MACrDC,KAAK,CAACC,IAAI,EAAE;QACV,OAAO;UACLC,GAAG,EAAE,mBAAmB;UACxBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEH;UACN;QACF,CAAC;MACH,CAAC;;MACD,MAAMI,cAAc,CAACC,IAAI,QAAgC;QAAA,IAA9B;UAAEC,QAAQ;UAAEC;QAAe,CAAC;QACrD,IAAI;UACF,MAAM;YAAEP;UAAK,CAAC,GAAG,MAAMO,cAAc;UACrCD,QAAQ,CAACf,QAAQ,CAACS,IAAI,CAACQ,KAAK,CAAC,CAAC;UAC9BF,QAAQ,CAAChB,SAAS,CAAC,IAAI,CAAC,CAAC;UACzBmB,OAAO,CAACC,GAAG,CAAE,gBAAe,EAAEV,IAAI,CAACQ,KAAK,CAAC;UACzC;QACF,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAE,mBAAkB,EAAEC,KAAK,CAAC;QACzC;MACF;IACF,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC;AAA4B,CAAC,GAAGpB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}