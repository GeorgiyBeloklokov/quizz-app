{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './reducers/counterSlice';\nimport cardsReducer from './reducers/cardSlice';\nimport testsReducer from './reducers/testsSlice';\n\n// import { booksApi } from './booksApi';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    cards: cardsReducer,\n    tests: testsReducer\n    // [booksApi.reducerPath]: booksApi.reducer,\n  }\n  // middleware: (getDefaultMiddlware) => getDefaultMiddlware().concat(booksApi.middleware),\n});","map":{"version":3,"names":["configureStore","counterReducer","cardsReducer","testsReducer","store","reducer","counter","cards","tests"],"sources":["C:/Users/georg/Desktop/diskD/diskD/my/read-books/src/store/store.ts"],"sourcesContent":["import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from './reducers/counterSlice';\r\nimport cardsReducer from './reducers/cardSlice';\r\nimport testsReducer from './reducers/testsSlice';\r\n\r\n// import { booksApi } from './booksApi';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    cards: cardsReducer,\r\n    tests: testsReducer,\r\n    // [booksApi.reducerPath]: booksApi.reducer,\r\n  },\r\n  // middleware: (getDefaultMiddlware) => getDefaultMiddlware().concat(booksApi.middleware),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAA6B,kBAAkB;AACtE,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;;AAEA,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IACPC,OAAO,EAAEL,cAAc;IACvBM,KAAK,EAAEL,YAAY;IACnBM,KAAK,EAAEL;IACP;EACF;EACA;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}