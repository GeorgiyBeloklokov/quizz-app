{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\georg\\\\Desktop\\\\diskD\\\\diskD\\\\my\\\\read-books\\\\src\\\\components\\\\TestItem\\\\QuestionItem.tsx\";\nimport { Box, FormControlLabel, Radio } from '@mui/material';\nimport style from './QuestionItem.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionItem = props => {\n  const {\n    answer,\n    score,\n    setScore,\n    rightAnsw\n  } = props;\n  function handleChecked(e) {\n    const target = e.target;\n    if (target.checked && rightAnsw === target.value) {\n      setScore(score + 1);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: style.form_radio,\n    children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      value: answer,\n      control: /*#__PURE__*/_jsxDEV(Radio, {\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 18\n      }, this),\n      label: answer,\n      onChange: e => handleChecked(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = QuestionItem;\nvar _c;\n$RefreshReg$(_c, \"QuestionItem\");","map":{"version":3,"names":["Box","FormControlLabel","Radio","style","QuestionItem","props","answer","score","setScore","rightAnsw","handleChecked","e","target","checked","value","form_radio"],"sources":["C:/Users/georg/Desktop/diskD/diskD/my/read-books/src/components/TestItem/QuestionItem.tsx"],"sourcesContent":["import { Box, FormControlLabel, Radio } from '@mui/material';\r\nimport { Dispatch, SetStateAction, ChangeEvent } from 'react';\r\nimport style from './QuestionItem.module.css';\r\n\r\ninterface IQuestionItem {\r\n  answer: string;\r\n  score: number;\r\n  setScore: Dispatch<SetStateAction<number>>;\r\n  rightAnsw: string;\r\n}\r\nexport const QuestionItem = (props: IQuestionItem) => {\r\n  const { answer, score, setScore, rightAnsw } = props;\r\n  function handleChecked(e: ChangeEvent<HTMLInputElement>) {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked && rightAnsw === target.value) {\r\n      setScore(score + 1);\r\n    }\r\n  }\r\n  return (\r\n    <Box className={style.form_radio}>\r\n      <FormControlLabel\r\n        value={answer}\r\n        control={<Radio required />}\r\n        label={answer}\r\n        onChange={(e) => handleChecked(e as ChangeEvent<HTMLInputElement>)}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,gBAAgB,EAAEC,KAAK,QAAQ,eAAe;AAE5D,OAAOC,KAAK,MAAM,2BAA2B;AAAC;AAQ9C,OAAO,MAAMC,YAAY,GAAIC,KAAoB,IAAK;EACpD,MAAM;IAAEC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EACpD,SAASK,aAAa,CAACC,CAAgC,EAAE;IACvD,MAAMC,MAAM,GAAGD,CAAC,CAACC,MAA0B;IAC3C,IAAIA,MAAM,CAACC,OAAO,IAAIJ,SAAS,KAAKG,MAAM,CAACE,KAAK,EAAE;MAChDN,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB;EACF;EACA,oBACE,QAAC,GAAG;IAAC,SAAS,EAAEJ,KAAK,CAACY,UAAW;IAAA,uBAC/B,QAAC,gBAAgB;MACf,KAAK,EAAET,MAAO;MACd,OAAO,eAAE,QAAC,KAAK;QAAC,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QAAI;MAC5B,KAAK,EAAEA,MAAO;MACd,QAAQ,EAAGK,CAAC,IAAKD,aAAa,CAACC,CAAC;IAAmC;MAAA;MAAA;MAAA;IAAA;EACnE;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAlBWP,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}